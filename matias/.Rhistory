rm(list=ls());gc()
library(dtplyr); library(Matrix); library(xgboost); library(data.table)
library(caret); library(glmnet);  library(Metrics); library(bit64)
myseed=718
library(pacman)
rm(list=ls());gc()
install.packages("dtplyr")
install.packages("Matrix")
install.packages("data.table")
install.packages("caret")
install.packages("glmnet")
install.packages("Metrics")
install.packages("bit64")
# install.packages("dtplyr")
# install.packages("Matrix")
# install.packages("data.table")
# install.packages("caret")
# install.packages("glmnet")
# install.packages("Metrics")
# install.packages("bit64")
library(dtplyr); library(Matrix); library(data.table)
library(caret); library(glmnet);  library(Metrics); library(bit64)
myseed=718
# actual: integer vector with truth labels, values range from 0 to n - 1 classes
# pred_m: predicted probs: column 1 => label 0, column 2 => label 1 and so on
mlogloss = function(actual, pred_m, eps = 1e-15){
if(max(actual) >= ncol(pred_m) || min(actual) < 0){
stop(cat('True labels should range from 0 to', ncol(pred_m) - 1, '\n'))
}
pred_m[pred_m > 1 - eps] = 1 - eps
pred_m[pred_m < eps] = eps
pred_m = t(apply(pred_m, 1, function(r)r/sum(r)))
actual_m = matrix(0, nrow = nrow(pred_m), ncol = ncol(pred_m))
actual_m[matrix(c(1:nrow(pred_m), actual + 1), ncol = 2)] = 1
-sum(actual_m * log(pred_m))/nrow(pred_m)
}
set.seed(myseed)
label_train <- fread("./input/gender_age_train.csv",
colClasses=c("character","character",
"integer","character"))
label_train <- fread("./input/gender_age_train.csv",
colClasses=c("character","character",
"integer","character"))
label_test <- fread("./input/gender_age_test.csv",
colClasses=c("character"))
#Setea test = a train
label_test$gender <- label_test$age <- label_test$group <- NA
#crea super
label <- rbind(label_train,label_test)
#une a nivel de super mejor:
train_more<-readRDS('rds/trainx2_20160728')
test_more<-readRDS('rds/testx2_20160728')
rm(list=ls()); gc()
library(data.table); library(dplyr); library(stringr); library(quanteda); library(bit64)
options(scipen=99)
set.seed(7)
train <- fread('./input/gender_age_train.csv')
test <- fread('./input/gender_age_test.csv')
group<-train$group
train<-select(train, device_id)
## Create train + test
super<-rbind(train, test)
events <- fread('./input/events.csv')
dim(events)
## Reducing df to only train devices
events<-inner_join(events, super, by="device_id")
dim(events)
events$hour = as.numeric(substr(events$timestamp, 12, 13))
events$timestamp<-as.Date(events$timestamp)
app_events <- fread('./input/app_events.csv')
## Reducing df to only train devices
app_events <- inner_join(app_events, unique(dplyr::select(events, event_id)), by="event_id")
dim(app_events)
gc()
labls <- fread('./input/label_categories.csv')
app_labls <-fread('./input/app_labels.csv')
#using only apps that appears in the train set
tmp<-data.table(app_id=unique(app_events$app_id))
app_labls<-inner_join(app_labls, tmp, by="app_id")
rm(tmp, train, test);gc()
gc()
cor_lab <- corpus(labls$category)
dfm_lab <- dfm(cor_lab, removeTwitter=TRUE, verbose=FALSE, stem = TRUE, ignoredFeatures=stopwords("english"))
## Using only top 15 labels in terms of frequency
words<-names(topfeatures(dfm_lab, 20))
labls<-cbind(labls, as.data.frame(dfm_lab[,words]))
labls<-left_join(labls, app_labls, by="label_id")
labls$label_id<- labls$category<- NULL
labls<- group_by(labls, app_id) %>%
summarise(unknown=sum(unknown),
game=sum(game),
travel=sum(travel),
shop=sum(shop),
car=sum(car),
servic=sum(servic),
babi=sum(babi),
comic=sum(comic),
fund=sum(fund),
bank=sum(bank),
high=sum( high),
low=sum(low),
sport=sum(educ),
share=sum(share),
educ=sum(educ),
class=sum(class),
inform=sum(inform),
financi=sum(financi),
hotel=sum(hotel),
health=sum(health),
nlab=n())
labls <- fread('./input/label_categories.csv')
app_labls <-fread('./input/app_labels.csv')
#using only apps that appears in the train set
tmp<-data.table(app_id=unique(app_events$app_id))
app_labls<-inner_join(app_labls, tmp, by="app_id")
rm(tmp, train, test);gc()
gc()
cor_lab <- corpus(labls$category)
dfm_lab <- dfm(cor_lab, removeTwitter=TRUE, verbose=FALSE, stem = TRUE, ignoredFeatures=stopwords("english"))
library(data.table); library(dplyr); library(stringr); library(quanteda); library(bit64)
# install.packages("dtplyr")
# install.packages("Matrix")
# install.packages("data.table")
# install.packages("caret")
# install.packages("glmnet")
# install.packages("Metrics")
# install.packages("bit64")
install.packages("quanteda")
install.packages("‘xml2")
install.packages("‘xml2")
install.packages("quanteda")
# for linux, install: sudo apt install libxml2
install.packages("quanteda")
devtools::install_github("quanteda/quanteda")
library("devtools")
install.packages("‘devtools")
install.packages("devtools")
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
# for linux, install: sudo apt install libxml2
install.packages("quanteda")
rm(list=ls()); gc()
rm(list=ls()); gc()
install.packages("devtools")
# for linux, install: sudo apt install libxml2
install.packages("quanteda")
R
version
install.packages("Rcpp", dependencies = TRUE)
install.packages("devtools")
# for linux, install: sudo apt install libxml2
install.packages("quanteda")
install.packages("Rcpp", dependencies = TRUE)
install.packages("devtools")
library(devtools)
library(Rcpp)
install.packages("devtools")
install.packages("devtools")
# for linux, may need to install:
# sudo apt-get -y build-dep libcurl4-gnutls-dev
# sudo apt-get -y install libcurl4-gnutls-dev
# sudo apt install libxml2-dev
install.packages("devtools")
install.packages("covr")
